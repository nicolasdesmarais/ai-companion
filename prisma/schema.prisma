generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id            String @id @default(uuid())
  name          String
  companions    Companion[]

  @@map("categories")
}

model Companion {
  id            String @id @default(uuid())
  userId        String
  userName      String
  src           String @db.Text
  name          String @db.Text
  description   String
  instructions  String @db.Text
  seed          String @db.Text
  visibility    AIVisibility @default(PRIVATE)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    String

  messages      Message[]

  modelId       String @default("llama2-13b")

  groups        GroupAI[]

  knowledge     KnowledgeAI[]

  permissions   AIPermissions[]

  @@index([categoryId])
  @@index([visibility])
  @@index([userId])
  @@fulltext([name, userName])
}

enum Role {
  user
  system
}

enum AIVisibility {
  PRIVATE
  GROUP
  PUBLIC
}

model Message {
  id          String   @id @default(uuid())
  role        Role
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companionId String
  userId      String

  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@index([companionId])
}

model UserSubscription {
  id                        String    @id @default(cuid())
  userId                    String    @unique
  stripeCustomerId          String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId      String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId             String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd    DateTime? @map(name: "stripe_current_period_end")
}

model Group {
  id                        String    @id @default(cuid())
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt @default(now())
  orgId                     String    @map(name: "org_id")
  ownerUserId               String   @map(name: "owner_user_id")
  name                      String
  availability              GroupAvailability @default(EVERYONE)
  users                     GroupUser[]
  companions                GroupAI[]

  @@map("groups")
}

enum GroupAvailability {
  EVERYONE
  RESTRICTED
}

model GroupUser {
  id                        Int       @id @default(autoincrement())
  group                     Group     @relation(fields: [groupId], references: [id])
  groupId                   String    @map(name: "group_id")
  userId                    String?   @map(name: "user_id")
  email                     String
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt @default(now())

  @@unique([groupId, email])
  @@map("group_users")
}

model GroupAI {
  group                     Group @relation(fields: [groupId], references: [id])
  groupId                   String    @map(name: "group_id")
  companion                 Companion @relation(fields: [companionId], references: [id])
  companionId               String    @map(name: "companion_id")
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt @default(now())

  @@id([groupId, companionId])
  @@map("group_ais")
}

model PublicDomain {
  domain                   String     @id

  @@map("public_domains")
}

model Knowledge {
  id                        String   @id @default(cuid())
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt @default(now())
  userId                    String   @map(name: "user_id")
  name                      String
  type                      String
  companions                KnowledgeAI[]

  @@map("knowledge")
}

model KnowledgeAI {
  knowledge                 Knowledge @relation(fields: [knowledgeId], references: [id])
  knowledgeId               String    @map(name: "knowledge_id")
  companion                 Companion @relation(fields: [companionId], references: [id])
  companionId               String    @map(name: "companion_id")

  @@id([knowledgeId, companionId])
  @@map("knowledge_ais")
}

model AIPermissions {
  userId                    String    @map(name: "user_id")
  companion                 Companion @relation(fields: [companionId], references: [id])
  companionId               String    @map(name: "companion_id")

  @@id([userId, companionId])
  @@map("ai_permissions")
}
